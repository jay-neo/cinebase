generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
  // binaryTargets = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // directUrl = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                  String    @id @default(uuid())
  createdAt           DateTime? @default(now())
  updatedAt           DateTime  @updatedAt
  username            String    @unique @default(cuid())
  name                String
  email               String    @unique
  password            String?
  avatar              String?
  phoneNumber         String?   @unique
  emailVerified       DateTime?
  role                UserRole  @default(USER)
  isCredentialAccount Boolean   @default(true)
  isTwoFactorEnabled  Boolean   @default(false)
  moderatorCreatedAt  DateTime?
  lastLogin           DateTime?

  accounts Account[]
  entries  Entry[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @db.Text
  accessToken       String? @db.Text
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String? @db.Text
  sessionState      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Entry {
  id                Int      @id @default(autoincrement())
  title             String
  type              String // "Movie" or "TV Show"
  director          String
  budget            Float? // in millions
  location          String
  duration          String // e.g., "148 min"
  year              Int
  imageUrl          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
